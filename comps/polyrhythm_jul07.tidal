d1 $ s "[kicklinn*4, hh*3, cp:1*2]"
d1 silence

d2 $ s "[kicklinn [cp:1*2, hh*2]/3 kicklinn kicklinn]"
d2 silence


d3 $ s "{hh cp:1 arpy}%6"

d4 $ s "{kicklinn}%2"

d7 $ s "{feel*4}%4" |+| speed "{1 1.5 2}%9" |+| coarse "{4 8 64}%2"
d7 silence


d6 $ s "test1"
  # n (irand 10)
  # cut (irand 8)

d6 silence

d7 $ s "{kicklinn*4}/3, kicklinn" # cut "2"

d8 $ s "{sd*2}/3"

-- STUT and OFF

d1 $ s "bd(3,8)"
-- 1. stut: add new note. x: how many, y: feedback, z:time
d1 $ rev $ stut 4 0.5 2.5 $ s "bd(3,8)"

-- 2. stut'
d5 $ stut' 3 (0.125/2) ((|*| speed (every 2 (0.125 <~) $ "1 2 3 4")) . (|+| pan "0.3")) $
  s "bd(3,8)"

-- 3. off
d6 $ off 0.125 (|*| speed "1.5") $ s "bd(3,8)"


-- BINARY PATTERN
let inverse 1 = 0
    inverse 0 = 1

do
  let pat = "[0 0 1/2 1 0 1 1 1/2]"
  d1 $ every 2 (|+| speed "0.75") $ every 4 (0.25 <~) $ every 4 (density 3) $ (0.5 ~>) $ pan pat # s "bass2"
    # cut "1"
  d2 $ (0.25 <~) $ pan (inverse <$> pat) # s "cp"
  d3 $ foldEvery [2,3] (0.25 ~>) $ gain (pat) # s "sd"
  d4 $ foldEvery [3,4] (0.5 <~) $ gain (inverse <$> pat) # s "hh"
  d5 $ stut' 3 (0.125/2) ((|*| speed (every 2 (0.125 <~) $ "1 2 3 4")) . (|+| pan "0.3")) $
    s "bd(3,8)"
  d6 $ off 0.125 (|*| speed "1.5") $ s "bd(3,8)"
  d7 $ s "{feel*4}%4" |+| speed "{1 1.5 2}%9" |+| coarse "{4 8 64}%2"

--
-- DO function: synchronizing 2 pattern
do
  let prog = "[0 2 4 -3]/4"
  let gainpat = "[1 1*2 0.5*3 1*2]"
  d8 $ gain gainpat # s "ab:3(3,8)" # cut "1" # up prog
  d9 $ gain gainpat # s "auto:4(3,8)" # gain "1.1" # up prog # cut "1"


do
  let chordpat = "<c'maj7 d'6by9 c'maj7 [d'6by9 g'maj9]>"
  let speedpat = "[1 1.25 0.75 -1.5]/3"
  d1 $ sometimesBy 0.75 (# crush 0.1) $ "psr" |> note chordpat
  d2 $ foldEvery [1,2] (0.25 ~>) $ speed (inverse <$> speedpat) # "gtr" |> note chordpat





hush
